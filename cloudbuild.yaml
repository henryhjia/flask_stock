steps:
# 1. Install dependencies for testing
- name: 'python:3.10'
  id: 'install-test-deps'
  entrypoint: 'pip'
  args: ['install', '-r', 'requirements.txt', '--user']

# 2. Run tests
- name: 'python:3.10'
  id: 'run-tests'
  entrypoint: 'python'
  args: ['-m', 'pytest']
  waitFor: ['install-test-deps']

# 3. Download proxy, start it, and run migrations
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'migrate-database'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    echo "--- Installing migration tools ---"
    pip install --user yoyo-migrations pg8000
    echo "--- Downloading Cloud SQL Proxy ---"
    wget https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.8.0/cloud-sql-proxy.linux.amd64 -O /workspace/cloud-sql-proxy
    chmod +x /workspace/cloud-sql-proxy
    echo "--- Starting Cloud SQL Proxy in background ---"
    /workspace/cloud-sql-proxy --quiet --private-ip ${_INSTANCE_CONNECTION_NAME} &
    echo "--- Waiting for proxy to initialize (5s) ---"
    sleep 5
    echo "--- Applying database migrations ---"
    /root/.local/bin/yoyo apply
  env:
    - 'DB_USER=${_DB_USER}'
    - 'DB_PASS=${_DB_PASS}'
    - 'DB_NAME=${_DB_NAME}'
  waitFor: ['run-tests']

# 4. Build the container image
- name: 'gcr.io/cloud-builders/docker'
  id: 'build-image'
  args:
    - 'build'
    - '-t'
    - 'us-central1-docker.pkg.dev/$PROJECT_ID/flask-stock-repo/flask-stock-service:$COMMIT_SHA'
    - '.'
  waitFor: ['migrate-database']

# 5. Push the container image to Artifact Registry
- name: 'gcr.io/cloud-builders/docker'
  id: 'push-image'
  args:
    - 'push'
    - 'us-central1-docker.pkg.dev/$PROJECT_ID/flask-stock-repo/flask-stock-service:$COMMIT_SHA'
  waitFor: ['build-image']

# 6. Deploy to Cloud Run
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'deploy-service'
  entrypoint: 'gcloud'
  args:
    - 'run'
    - 'deploy'
    - 'flask-stock-service'
    - '--image=us-central1-docker.pkg.dev/$PROJECT_ID/flask-stock-repo/flask-stock-service:$COMMIT_SHA'
    - '--region=us-central1'
    - '--allow-unauthenticated'
    - '--set-env-vars=INSTANCE_CONNECTION_NAME=${_INSTANCE_CONNECTION_NAME},DB_NAME=${_DB_NAME},DB_USER=${_DB_USER},DB_PASS=${_DB_PASS}'
  waitFor: ['push-image']

# Define user-defined variables
substitutions:
  _INSTANCE_CONNECTION_NAME: 'flask-stock-app-2025:us-central1:flask-stock-db-instance'
  _DB_NAME: 'flask_stock_db'
  _DB_USER: 'stock_user'
  # _DB_PASS is set as a secret variable in the trigger

images:
- 'us-central1-docker.pkg.dev/$PROJECT_ID/flask-stock-repo/flask-stock-service:$COMMIT_SHA'

options:
  logging: CLOUD_LOGGING_ONLY